// MACHINE GENERATED BY 'go generate' COMMAND; DO NOT EDIT

package asyncio

import "unsafe"
import "syscall"

var _ unsafe.Pointer

var (
	modkernel32 = syscall.NewLazyDLL("kernel32.dll")

	procCreateEventW        = modkernel32.NewProc("CreateEventW")
	procResetEvent          = modkernel32.NewProc("ResetEvent")
	procGetOverlappedResult = modkernel32.NewProc("GetOverlappedResult")
)

func createEvent(a *syscall.SecurityAttributes, m bool, i bool, n *uint16) (h syscall.Handle, err error) {
	var _p0 uint32
	if m {
		_p0 = 1
	} else {
		_p0 = 0
	}
	var _p1 uint32
	if i {
		_p1 = 1
	} else {
		_p1 = 0
	}
	r0, _, e1 := syscall.Syscall6(procCreateEventW.Addr(), 4, uintptr(unsafe.Pointer(a)), uintptr(_p0), uintptr(_p1), uintptr(unsafe.Pointer(n)), 0, 0)
	h = syscall.Handle(r0)
	if h == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func resetEvent(h syscall.Handle) (err error) {
	r1, _, e1 := syscall.Syscall(procResetEvent.Addr(), 1, uintptr(h), 0, 0)
	if r1 == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func getOverlappedResult(h syscall.Handle, o *syscall.Overlapped, n *uint32, wait bool) (err error) {
	var _p0 uint32
	if wait {
		_p0 = 1
	} else {
		_p0 = 0
	}
	r1, _, e1 := syscall.Syscall6(procGetOverlappedResult.Addr(), 4, uintptr(h), uintptr(unsafe.Pointer(o)), uintptr(unsafe.Pointer(n)), uintptr(_p0), 0, 0)
	if r1 == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}
